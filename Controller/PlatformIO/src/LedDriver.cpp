
/*
LedDriver.h
AUTHOR: Anthony Mesa

Provides basic functionality for controlling a non-addressable LED strip via arduino.
*/

/*
================================================================================
    Libraries
================================================================================
*/

#include "Arduino.h"
#include "LedDriver.h"

/*
================================================================================
  Definitions
================================================================================
*/

#define LED_R 0
#define LED_G 0
#define LED_B 3
#define LED_W 0
#define LED_PERIOD 3000 // ms

void (*HoltEnvironments::PrezenzQ::LedDriver::generateLedValue)(HoltEnvironments::PrezenzQ::LedDriver::LedColor *_color) = NULL;

/**
 * Initializes the driver.
 * 
 * Initialization includes setting the related pins for the LED and setting the 
 * state of the driver to off.
 *
 * @see setState()
 * @return int 
 */
int HoltEnvironments::PrezenzQ::LedDriver::init() {

  pinMode(LED_R, OUTPUT);
  digitalWrite(LED_R, LOW);

  pinMode(LED_G, OUTPUT);
  digitalWrite(LED_G, LOW);

  pinMode(LED_B, OUTPUT);
  digitalWrite(LED_B, LOW);

  pinMode(LED_W, OUTPUT);
  digitalWrite(LED_W, OUTPUT);

  setState(State::OFF);

  return 0;
}

/**
 * Sets the state of the driver.
 * 
 * Setting the state of the driver updates the function being used to generate the 
 * corresponding LED color/pattern;
 * 
 * @param _state Initial state that the controller should start with.
 */
void HoltEnvironments::PrezenzQ::LedDriver::setState(HoltEnvironments::PrezenzQ::LedDriver::State _state) {
  switch(_state){
    case State::OFF:
      generateLedValue = &ledLoopOff;
      break;
    case State::WAITING:
      generateLedValue = &ledLoopWaiting;
      break;
    case State::ON:
      generateLedValue = &ledLoopOn;
      break;
  }
}

/**
 * Updates the pins of the Arduino with the values generated by the function
 * pointed to by the generateLedValue function pointer.
 * 
 * A static LedColor struct contains the rgb values to be sent to the led strip.
 * the address of this struct is passed to the generating function so that
 * it can update the values stored in the static color struct.
 */
void HoltEnvironments::PrezenzQ::LedDriver::update() {
  static LedColor color;

  if(generateLedValue != NULL){
    (*generateLedValue)(&color);

    analogWrite(LED_R, color.r);
    analogWrite(LED_G, color.g);
    analogWrite(LED_B, color.b);
    analogWrite(LED_W, color.w);
  }
}

/**
 * Updates the rgbw values of the LedColor struct parameter provided to display the led
 * strip's off state.
 * 
 * @param _color 
 */
void HoltEnvironments::PrezenzQ::LedDriver::ledLoopOff(HoltEnvironments::PrezenzQ::LedDriver::LedColor *_color){
  if(_color != NULL){
    _color->r = 0;
    _color->g = 0;
    _color->b = 0;
    _color->w = 0;
  }
}

/**
 * Updates the rgbw values of the LedColor struct parameter provided to display the led 
 * strip's waiting state.
 * 
 * @param _color 
 */
void HoltEnvironments::PrezenzQ::LedDriver::ledLoopOn(HoltEnvironments::PrezenzQ::LedDriver::LedColor *_color){
  if(_color != NULL){
    _color->r = 0;
    _color->g = 0;
    _color->b = 255;
    _color->w = 0;
  }
}

/**
 * Updates the rgbw values of the LedColor struct parameter provided to display the led 
 * strip's on state.
 * 
 * @param _color 
 */
void HoltEnvironments::PrezenzQ::LedDriver::ledLoopOn(HoltEnvironments::PrezenzQ::LedDriver::LedColor *_color){
  if(_color != NULL){
    _color->r = 0;
    _color->g = 0;
    _color->b = 255;
    _color->w = 0;
  }
}